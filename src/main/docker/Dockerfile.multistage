FROM maven:3-eclipse-temurin-21 AS build
WORKDIR /code
COPY src /code/src
COPY pom.xml /code/pom.xml
RUN mvn package


FROM registry.access.redhat.com/ubi8/openjdk-21:1.18

ENV LANGUAGE='en_US:en'

# We make four distinct layers so if there are application changes the library layers can be re-used
COPY --from=build --chown=185 /code/target/quarkus-app/lib/ /deployments/lib/
COPY --from=build --chown=185 /code/target/quarkus-app/*.jar /deployments/
COPY --from=build --chown=185 /code/target/quarkus-app/app/ /deployments/app/
COPY --from=build --chown=185 /code/target/quarkus-app/quarkus/ /deployments/quarkus/

EXPOSE 8080
USER 185
ENV JAVA_OPTS_APPEND="-Dquarkus.http.host=0.0.0.0 -Djava.util.logging.manager=org.jboss.logmanager.LogManager"
ENV JAVA_APP_JAR="/deployments/quarkus-run.jar"

ENTRYPOINT [ "/opt/jboss/container/java/run/run-java.sh" ]

## Stage 1 : build with maven builder image with native capabilities
# FROM quay.io/quarkus/ubi-quarkus-mandrel-builder-image:jdk-21 AS build
# COPY --chown=quarkus:quarkus mvnw /code/mvnw
# COPY --chown=quarkus:quarkus .mvn /code/.mvn
# COPY --chown=quarkus:quarkus pom.xml /code/
# USER quarkus
# WORKDIR /code
# RUN ./mvnw -B org.apache.maven.plugins:maven-dependency-plugin:3.1.2:go-offline
# COPY src /code/src
# RUN ./mvnw package -Dnative

## Stage 2 : create the docker final image
# FROM quay.io/quarkus/quarkus-micro-image:2.0
# WORKDIR /work/
# COPY --from=build /code/target/*-runner /work/application

# # set up permissions for user `1001`
# RUN chmod 775 /work /work/application \
#   && chown -R 1001 /work \
#   && chmod -R "g+rwX" /work \
#   && chown -R 1001:root /work

# # TODO: testar se esse EXPOSE é necessário pois já está definido no compose.yaml
# EXPOSE 8080
# USER 1001

# CMD ["./application", "-Dquarkus.http.host=0.0.0.0"]
